#@Override
#@Transactional
#public void save(Warehouse warehouse) {
#    // Create a new WarehouseEntity object
#    WarehouseEntity warehouseEntity = new WarehouseEntity();
#
#    // Set the fields from the domain model to the entity
#    warehouseEntity.setWarehouseId(warehouse.getWarehouseNumber().getId());  // WarehouseId is mapped to a UUID
#    warehouseEntity.setMaterialType(warehouse.getMaterialType().toString());  // Convert MaterialType enum to String
#    warehouseEntity.setSellerId(warehouse.getSellerId().sellerID());  // Convert SellerId to UUID
#
#    // Map the events window from the domain model
#    WarehouseEventsWindowEntity eventsWindowEntity = new WarehouseEventsWindowEntity();
#    eventsWindowEntity.setWarehouseEventsWindowId(warehouse.getEventsWindow().getWarehouseEventsWindowId());  // Set the ID of the events window
#    eventsWindowEntity.setWarehouseId(warehouseEntity.getWarehouseId());  // Set the warehouse ID for the events window
#
#    // Map the list of WarehouseEventEntity
#    List<WarehouseEventEntity> eventEntities = warehouse.getEventsWindow().getWarehouseEventList().stream()
#            .map(event -> new WarehouseEventEntity(
#                    event.id().getId(),  // Map the event ID
#                    event.time(),  // Map the timestamp
#                    event.type().toString(),  // Convert event type to string
#                    event.materialTrueWeight(),  // Map the material weighInTime
#                    event.weighBridgeTicketId()  // Map the weighbridge ticket ID
#            ))
#            .collect(Collectors.toList());
#
#    // Set the event list in the events window entity
#    eventsWindowEntity.setWarehouseEventList(eventEntities);
#
#    // Set the events window in the warehouse entity
#    warehouseEntity.setWarehouseEventsWindow(eventsWindowEntity);
#
#    // Save the warehouseEntity and its nested entities
#    warehouseRepository.save(warehouseEntity);
#}
###
### Weigh-In Test Request

POST http://localhost:8091/api/bridge/weigh-in
Content-Type: application/json

{
  "licensePlate": "ABC1001",
  "startWeight": 200.0,
  "materialType": "IRON",
  "sellerId": "8d50dbe3-68a4-4afc-a242-13818629ac9d",
  "weighInTime": "2024-09-23T11:00:00"
}

###
POST http://localhost:8091/api/bridge/weigh-out
Content-Type: application/json

{
  "licensePlate": "ABC1001",
  "endWeight": 100.0,
  "materialType": "IRON",
  "sellerId": "8d50dbe3-68a4-4afc-a242-13818629ac9d",
  "weighInTime": "2024-09-23T12:00:00",
  "warehouseStatus": "ALREADY_EXISTS_NOT_FULL"
}




####

POST http://localhost:8091/api/bridge/weigh-in
Content-Type: application/json

{
  "licensePlate": "ABC1001",
  "startWeight": 200.0,
  "materialType": "IRON",
  "sellerId": "326f5d06-17d0-42b6-8f68-ae815d9ce5f6",
  "weighInTime": "2024-09-23T11:00:00"
}

###
POST http://localhost:8091/api/bridge/weigh-out
Content-Type: application/json

{
  "licensePlate": "ABC1001",
  "endWeight": 100.0,
  "materialType": "IRON",
  "sellerId": "326f5d06-17d0-42b6-8f68-ae815d9ce5f6",
  "weighInTime": "2024-09-23T11:00:00",
  "warehouseStatus": "DISREGARD"
}

###

# curl -X POST "http://localhost:8091/api/gate" -H "Content-Type: application/json" -d '{
#    "licensePlate": "ABC1234",
#    "localDate": "2024-09-23T11:00:00"
#}'
POST http://localhost:8091/api/gate
Content-Type: application/json

{
  "licensePlate": "ABC1234",
  "localDate": "2024-09-23T11:00:00"
}

###

# curl -X POST "http://localhost:8091/api/appointments" -H "Content-Type: application/json" -d '{
#    "sellerId": "6bc6f408-50d2-4ed5-95a4-7869322c2355",
#    "licensePlate": "ABC1234",
#    "materialType": "IRON",
#    "time": "2001-11-11T11:00:00"
#}'




POST http://localhost:8091/api/Bridge
Content-Type: application/json

{
    "licensePlate": "ABC1234",
    "weight": 15000.0
}



###
POST http://localhost:8091/api/Bridge/weighTruckIn
Content-Type: application/json

{
"licensePlate": "ABC123",
"weight": 25000.0
}
###

POST http://localhost:8091/api/Bridge/weighTruckOut
Content-Type: application/json

{
  "licensePlate": "ABC123",
  "grossWeight": 12000.0
}
